plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'idea'
    id 'me.modmuss50.mod-publish-plugin'
}

version = "${minecraft_version}-${mod_version}-FABRIC"
archivesBaseName = "${mod_id}"

repositories {
    maven {
        url "https://maven.shedaniel.me/" // for rei
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings(loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraft_version}:${mappings_version}@zip")
    })

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-fabric', version: "${spectrelib_range}"

    modRuntimeOnly "curse.maven:architectury-419699:${architectury_version}"
    modImplementation "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"
    modCompileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    modCompileOnly "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"
    modCompileOnly "curse.maven:create_fabric-624165:${create_fabric_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cardinal_components_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cardinal_components_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cardinal_components_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cardinal_components_version}"
	modCompileOnly "curse.maven:fabric_seasons-413523:${fabric_seasons_version}"
    modImplementation "vazkii.patchouli:Patchouli:${patchouli_version}-FABRIC-SNAPSHOT"
    modRuntimeOnly "curse.maven:simpletextoverlay-321283:${simpletextoverlay_fabric_version}"

    modRuntimeOnly("com.terraformersmc:modmenu:${mod_menu_version}") {
        transitive = false
    }
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":Common")

    include group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-fabric', version: "${spectrelib_version}"

    if (System.getenv('DATA_GEN') != null) {
        // Datagen mods
    }
    else {
        // Runtime testing mods
        //modRuntimeOnly "curse.maven:-:${}"
        // This doesn't work for whatever reason. Such a strange port
        //modRuntimeOnly "curse.maven:create_fabric-624165:${create_fabric_version}"
        //modRuntimeOnly "curse.maven:more_food-874343:${more_food_fabric_version}"
        //modRuntimeOnly "curse.maven:farmers_delight-993166:5568031"
    }
}

loom {
	if (project(":Common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":Common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        commonDatagen {
            client()
            vmArg "-D${mod_id}.common_datagen=1"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../Common/src/generated/resources")}"
        }
        fabricDatagen {
            client()
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

processResources {
    from project(":Common").sourceSets.main.resources
    // Added so we have book data and damage types built in Forge datagen
    from ('../Forge/src/generated/resources/') {
        exclude '**/recipes/*'
    }
    
    inputs.property "version", project.version
    exclude '.cache'
    duplicatesStrategy(DuplicatesStrategy.FAIL)

    filesMatching("fabric.mod.json") {
        expand 'version': project.version, 'fabric_mc_version_range': project.fabric_mc_version_range, 'license': project.license,
                'mod_id': project.mod_id, 'mod_author': project.mod_author, 'mod_description': project.mod_description,
                'mod_name': project.mod_name, 'issue_tracker': project.issue_tracker, 'fabric_loader_min_version': fabric_loader_min_version
    }

    filesMatching("pack.mcmeta") {
        expand 'mod_name': project.mod_name
    }

    filesMatching('*.mixins.json') {
        expand "mod_id": "${archivesBaseName}"
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

publishing {
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'
def publishFile = project(":").projectDir.toString() + "/Fabric/build/libs/${archivesBaseName}-${version}.jar"

publishMods {
    file = file(publishFile)
    changelog = file(changelogFile).text
    type = "${release_type}".startsWith("release") ? STABLE : ("${release_type}".startsWith("beta") ? BETA : ALPHA)
    modLoaders.add('fabric')

    if (project.hasProperty('hscurseApiKey')) {
        curseforge {
            accessToken = project.hscurseApiKey
            projectId = project.hscurseId
            javaVersions.add(JavaVersion.toVersion("${java_version}"))
            clientRequired = true
            serverRequired = true
            minecraftVersions.addAll("${release_versions}".split(','))
            embeds('spectrelib')
			requires('fabric-api')
			optional('jei')
			optional('simpletextoverlay')
			optional('serene-seasons')
			optional('biomes-o-plenty')
			optional('oh-the-biomes-youll-go')
			optional('croptopia')
			optional('farmers-delight-refabricated')
			optional('xercamod')
			optional('kitteh6660s-morecraft')
			optional('sophisticated-backpacks')
			optional('ecologics')
			optional('ars-nouveau')
			optional('sprout')
			optional('create-cafe')
			optional('fruit-trees')
			optional('leave-my-bars-alone')
			optional('create')
			optional('patchouli')
			optional('scuba-gear')
			optional('kobolds')
			optional('the-twilight-forest')
			optional('primal-winter')
			optional('more-food-xd')
			optional('terralith')
        }
    }
    if (project.hasProperty('hsModrinthId')) {
        modrinth {
            accessToken = project.modrinthKey
            projectId = project.hsModrinthId
            minecraftVersions.addAll("${release_versions}".split(','))
            requires('fabric-api')
            optional('create')
            optional('ecologics')
            optional('create-cafe')
            optional('scuba-gear')
            optional('farmers-delight-refabricated')
            optional('xercamod')
            optional('leave-my-bars-alone')
            optional('sprout')
            optional('patchouli')
            optional('jei')
            optional('biomesyougo')
            optional('kobolds')
            optional('primal-winter')
            optional('tinkers-construct')
            optional('fruitful-fun')
            optional('more-food-xd')
            optional('terralith')
        }
    }
    if (project.hasProperty('hsGithubToken')) {
    }
}
