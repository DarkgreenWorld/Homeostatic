plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.8'
    id 'me.modmuss50.mod-publish-plugin'
}

archivesBaseName = "${mod_id}"
version = "${minecraft_version}-${mod_version}-FORGE"

mixin {
    add sourceSets.main, "${mod_id}-refmap.json"

    config "${mod_id}.mixins.json"
    config "${mod_id}_forge.mixins.json"
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}-${minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${mod_id}.mixins.json"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${mod_id}.mixins.json"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${mod_id}.mixins.json"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    implementation fg.deobf(group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-forge', version: "${spectrelib_range}")
    jarJar fg.deobf(group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-forge', version: "${spectrelib_range}") {
        jarJar.pin(it, "${spectrelib_version}")
    }

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    compileOnly fg.deobf("curse.maven:sereneseasons-291874:${serene_seasons_forge_version}")
    compileOnly fg.deobf("curse.maven:create-328085:${create_forge_version}")
    implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}-FORGE-SNAPSHOT")
    implementation fg.deobf("xyz.brassgoggledcoders:PatchouliProvider:${patchouli_provider_version}")
    compileOnly fg.deobf("dev.gigaherz.sewingkit:SewingKit-${minecraft_version}:${sewingkit_version}")

    if (System.getenv('DATA_GEN') != null) {
        runtimeOnly fg.deobf("curse.maven:create-328085:${create_forge_version}")
        runtimeOnly fg.deobf("dev.gigaherz.sewingkit:SewingKit-${minecraft_version}:${sewingkit_version}")
    }
    else {
        //runtimeOnly "vazkii.patchouli:Patchouli:${patchouli_version}-FORGE-SNAPSHOT"
        runtimeOnly fg.deobf("curse.maven:simpletextoverlay-321283:${simpletextoverlay_forge_version}")
        //runtimeOnly fg.deobf("dev.gigaherz.sewingkit:SewingKit-${minecraft_version}:${sewingkit_version}")
        //runtimeOnly fg.deobf("curse.maven:sereneseasons-291874:${serene_seasons_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:configured-457570:4462839")
        //runtimeOnly fg.deobf("curse.maven:biomesoplenty-220318:${bop_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:terrablender-563928:${terrablender_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:terralith-513688:5512076")
        //runtimeOnly fg.deobf("curse.maven:primalwinter-393321:4575861")
        //runtimeOnly fg.deobf("curse.maven:byg-247560:${byg_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:corgilib-693313:${corgilib_forge_version}")
        //runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:twilightforest-227639:${twilight_forest_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:botania-225643:???")
        //runtimeOnly fg.deobf("curse.maven:curios-309927:5367944")
        //runtimeOnly fg.deobf("curse.maven:croptopia-415438:4512807")
        //runtimeOnly fg.deobf("curse.maven:farmers_delight-398521:5051242")
        //runtimeOnly fg.deobf("curse.maven:xerca-341575:???")
        //runtimeOnly fg.deobf("curse.maven:morecraft-59648:???")
        //runtimeOnly fg.deobf("curse.maven:sophisticated_core-618298:???")
        //runtimeOnly fg.deobf("curse.maven:sophisticated_backpacks-422301:???")
        //runtimeOnly fg.deobf("curse.maven:ecologics-570463:???")
        //runtimeOnly fg.deobf("curse.maven:sprout-565856:???")
        //runtimeOnly fg.deobf("curse.maven:arsnouveau-401955:${ars_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:ars_elemental-561470:5609198")
        //runtimeOnly fg.deobf("curse.maven:create-328085:${create_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:create_cafe-542235:???")
        //runtimeOnly fg.deobf("curse.maven:kiwi-303657:???")
        //runtimeOnly fg.deobf("curse.maven:fruittrees-355467:???")
        //runtimeOnly fg.deobf("curse.maven:appleskin-248787:4605078")
        //runtimeOnly fg.deobf("curse.maven:puzzleslib-495476:4660882")
        //runtimeOnly fg.deobf("curse.maven:leavemybarsalone-281715:4613509")
        //runtimeOnly fg.deobf("curse.maven:scuba_gear-399090:4593711")
        //runtimeOnly fg.deobf("curse.maven:kobolds-484967:4632499")
        //runtimeOnly fg.deobf("curse.maven:more_food-874343:${more_food_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:kubejs-238086:${kubejs_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:rhino-416294:${rhino_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:crafttweaker-239197:${crafttweaker_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:phc_food_core-372534:${phc_food_core_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:phc_crops-361385:${phc_crops_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:phc_trees-365460:${phc_trees_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:phc_food_extended-402231:${phc_food_extended_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:the_veggie_way-270684:${the_veggie_way_forge_version}")
        //runtimeOnly fg.deobf("curse.maven:kotlin-351264:5402061")
        //runtimeOnly fg.deobf("curse.maven:valkyrien_skies-258371:5212232")
        //runtimeOnly fg.deobf("curse.maven:eureka_ships-654384:5321630")
        //runtimeOnly fg.deobf("curse.maven:undergarden-379849:5182632")
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', '*.mixins.json']
def replaceProperties = [
    'version': version, 'forge_mc_version_range': forge_mc_version_range, 'forge_version_range': forge_version_range,
    'license': license, 'mod_id': mod_id, 'mod_author': mod_author, 'mod_description': mod_description,
    'mod_name': mod_name, 'issue_tracker': issue_tracker, 'mod_credits': mod_credits,
    'loader_version_range': loader_version_range, 'mod_update_branch': mod_update_branch
]

processResources {
    from project(":Common").sourceSets.main.resources
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    inputs.properties replaceProperties
    exclude '.cache'
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

tasks.jarJar.finalizedBy('reobfJar')
jar.finalizedBy('reobfJarJar')

reobf {
    jarJar {}
}

tasks.jarJar.configure {
    archiveClassifier.set("")
}

jarJar {
    enable()
}

publishing {
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(project(":").projectDir.toString() + '/build/libs/changelog.txt');
    templateContent = file(project(":").projectDir.toString() + '/files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${minecraft_version}-${last_mod_version}";
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("../files/templates/") {
        include 'updates.json'
        expand 'version': version, 'minecraft_version': minecraft_version
    }

    it.into '../files/'
}

tasks.generateUpdates.mustRunAfter('jar', 'sourcesJar')

tasks.build.dependsOn('changelog', 'generateUpdates')

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'
def publishFile = project(":").projectDir.toString() + "/Forge/build/libs/${archivesBaseName}-${version}.jar"

publishMods {
    file = file(publishFile)
    changelog = file(changelogFile).text
    type = "${release_type}".startsWith("release") ? STABLE : ("${release_type}".startsWith("beta") ? BETA : ALPHA)
    modLoaders.addAll(['neoforge', 'forge'])

    if (project.hasProperty('hscurseApiKey')) {
        curseforge {
            accessToken = project.hscurseApiKey
            projectId = project.hscurseId
            javaVersions.add(JavaVersion.toVersion("${java_version}"))
            clientRequired = true
            serverRequired = true
            minecraftVersions.addAll("${release_versions}".split(','))
            embeds('spectrelib')
            optional('configured')
            optional('catalogue')
            optional('jei')
            optional('simpletextoverlay')
            optional('serene-seasons')
            optional('biomes-o-plenty')
            optional('oh-the-biomes-youll-go')
            optional('croptopia')
            optional('farmers-delight')
            optional('xercamod')
            optional('kitteh6660s-morecraft')
            optional('sophisticated-backpacks')
            optional('ecologics')
            optional('ars-nouveau')
            optional('sprout')
            optional('create-cafe')
            optional('fruit-trees')
            optional('leave-my-bars-alone')
            optional('create')
            optional('patchouli')
            optional('scuba-gear')
            optional('kobolds')
            optional('primal-winter')
            optional('tinkers-construct')
            optional('sewing-kit')
            optional('more-food-xd')
            optional('pams-harvestcraft-2-food-core')
            optional('pams-harvestcraft-2-crops')
            optional('pams-harvestcraft-2-trees')
            optional('pams-harvestcraft-2-food-extended')
            optional('the-veggie-way')
            optional('the-undergarden')
            optional('terralith')
        }
    }
    if (project.hasProperty('hsModrinthId')) {
        modrinth {
            accessToken = project.modrinthKey
            projectId = project.hsModrinthId
            minecraftVersions.addAll("${release_versions}".split(','))
            optional('create')
            optional('ecologics')
            optional('create-cafe')
            optional('scuba-gear')
            optional('farmers-delight')
            optional('xercamod')
            optional('leave-my-bars-alone')
            optional('sprout')
            optional('patchouli')
            optional('jei')
            optional('biomesyougo')
            optional('kobolds')
            optional('primal-winter')
            optional('tinkers-construct')
            optional('fruitful-fun')
            optional('more-food-xd')
            optional('the-undergarden')
            optional('terralith')
        }
    }
    if (project.hasProperty('hsGithubToken')) {
    }
}
